{
  "posts" : {
    "BuildingaMemoryGamewithElmlang" : {
      "content" : "<div><p>Elm is a fully functional language and it is in your browser that is the thing I love about it! UI side Functional development.</p></div><div><p>It is pretty fast comparing to other available UI frameworks out there. Here is the performance result from <a href=\"https://evancz.github.io/todomvc-perf-comparison/\">“TodoMVCBenchmark”</a>:</p></div><div><p><img src=\"http://imgh.us/todoMVC_(1).png\" alt=\"alt\"></div><div>You may ask your self why Elm is so fast they are many reason one is leveraging the &amp;<b&amp;>virtual DOM&amp;</b&amp;>.</div><div>The new <a href=\"https://github.com/evancz/elm-html\">elm-html</a> library enabled using the CSS and HTML directly in Elm and uses and optimizes the code by doing some <a href=\"http://package.elm-lang.org/packages/evancz/elm-html/4.0.2/Html-Lazy\">lazy</a> rendering.</p></div><div><p>All these awesome features made me explore Elm and make a simple memory game with it.</p></div><div><p>The game simply has two modules <strong>Card</strong> and <strong>GAME</strong>.</p></div><div><p>The logic of every Elm program will break up into three cleanly separated parts:</p></div><div><ul></div><div><li>model</li></div><div><li>view</li></div><div><li>update</li></div><div></ul></div><div><p>Having the view separated from the update part makes the code easier to test and it is architecturally great!</p></div><div><p>&amp;<h5&amp;>Model&amp;</h5&amp;></div><div>Each Card has three property: status, image and id. Status is a type defined below which you can compare types in Elm to Enums in other languages.</p></div><div><p>You need to define initial model as the initial status of your model which is the Card here:</p></div><div><pre><code class=\"hljs elm\">type alias Model =</div><div>&nbsp; {</div><div>&nbsp; &nbsp;status : Status,</div><div>&nbsp; &nbsp;image : <span class=\"hljs-built_in\">String</span>,</div><div>&nbsp; &nbsp;id : Int</div><div>&nbsp; }</div><div><br></div><div>type Status</div><div>&nbsp; &nbsp; = Opened</div><div>&nbsp; &nbsp; | Closed</div><div>&nbsp; &nbsp; | Locked</div><div><br></div><div>initialModel: <span class=\"hljs-built_in\">String</span> -&amp;> Int -&amp;> Model</div><div>initialModel img id =</div><div>&nbsp; { status = Closed,</div><div>&nbsp; &nbsp; image = img,</div><div>&nbsp; &nbsp; id = &nbsp;id</div><div>&nbsp; }</div><div></code></pre></div><div><p>&amp;<h5&amp;>View&amp;</h5&amp;></div><div>The next part is to have the HTML defined in the <strong>view</strong> function and update the view inside the <strong>update</strong> function. The view function gets a &amp;<b&amp;>Singnal&amp;</b&amp;> which is the status of the Card and the &amp;<b&amp;>Model&amp;</b&amp;> and returns &amp;<b&amp;>Html&amp;</b&amp;>.</p></div><div><pre><code class=\"hljs elm\">view : Signal.Address Status -&amp;> Model -&amp;> Html.Html</div><div> view address model =</div><div>&nbsp; div [Html.Attributes.class <span class=\"hljs-string\">\"flipper\"</span>,Html.Attributes.id <span class=\"hljs-string\">\"flipper\"</span>] [ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Html.span [imageContainerStyle] [ Html.span [onClick address model.status] [ Html.img [ toImage model, imageStyle] [] ] ] ]</div><div><br></div><div></code></pre></div><div><p>&amp;<h5&amp;>Update&amp;</h5&amp;></p></div><div><p>Now lastly we have to update the view based on the status of the card and our Model. In this case in the Card is matched it is locked so we do nothing and return the Model. If the card is Closed we change its status to open and update the Model and if it is Opened we do otherwise.</p></div><div><pre><code class=\"hljs elm\">update: Status -&amp;> Model -&amp;> Model</div><div>update action model =</div><div>&nbsp; <span class=\"hljs-keyword\">case</span> action <span class=\"hljs-keyword\">of</span></div><div>&nbsp; &nbsp; Locked -&amp;> model</div><div>&nbsp; &nbsp; Closed -&amp;> { model | status &amp;<- Opened}</div><div>&nbsp; &nbsp; Opened -&amp;> { model | status &amp;<- Closed}</div><div><br></div><div></code></pre></div><div><p>&amp;<h5&amp;>Main&amp;</h5&amp;></p></div><div><p>I used the <a href=\"https://github.com/evancz/start-app\">StartApp</a> package to wire together the initial model with the update and view functions. It is a small wrapper around Elm’s signals you can check the code out for more understanding.</p></div><div><p>The key to wiring up your application is the concept of an Address. Every event handler in our view function reports to a particular address. It just sends chunks of data along. The StartApp package monitors all the messages coming in to this address and feeds them into the update function. The model gets updated and elm-html takes care of rendering the changes efficiently.[from elm-architecture]</p></div><div><p>Lastly we have our main function defined in Game.elm .</p></div><div><pre><code class=\"hljs elm\"><span class=\"hljs-built_in\">module</span> MemoryGame where</div><div><br></div><div><span class=\"hljs-keyword\">import</span> Html exposing (div, button, text, span, p, img)</div><div><span class=\"hljs-keyword\">import</span> Html.Events exposing (onClick)</div><div><span class=\"hljs-keyword\">import</span> Signal.Time exposing (..)</div><div><span class=\"hljs-keyword\">import</span> Html.Attributes</div><div><span class=\"hljs-keyword\">import</span> StartApp.Simple exposing (start)</div><div><br></div><div>main =</div><div>&nbsp; start { model = init, view = view, update = update }</div><div><br></div><div>type alias Model = {</div><div>&nbsp; &nbsp;cards: List Card.Model,</div><div>&nbsp; &nbsp;matched_pair: Int,</div><div>&nbsp; &nbsp;score: Int,</div><div>&nbsp; &nbsp;rows: Int,</div><div>&nbsp; &nbsp;columns: Int</div><div>}</div><div><br></div><div>type Action</div><div>&nbsp; = Do Int Card.Status</div><div>&nbsp; | Restart</div><div></code></pre></div><div><p>Out inital model is randomly generated list of Cards with some other properties used to keep track of matches and game status.</div><div>For generating random list objects I used &nbsp;<strong>Random.Array.shuffle</strong> function from Random package.</p></div><div><pre><code class=\"hljs elm\">type alias Time = Float</div><div><br></div><div>initSeed =</div><div>&nbsp; &nbsp;round Now.loadTime</div><div><br></div><div>shuffle: List Card.Model -&amp;> List Card.Model</div><div>shuffle list =</div><div>&nbsp; <span class=\"hljs-keyword\">case</span> Random.Array.shuffle (Random.initialSeed initSeed) (<span class=\"hljs-built_in\">Array</span>.fromList list) <span class=\"hljs-keyword\">of</span></div><div>&nbsp; &nbsp; (x, y) -&amp;> (<span class=\"hljs-built_in\">Array</span>.toList x)</div><div><br></div><div>init: Model</div><div>init =</div><div>&nbsp; {</div><div>&nbsp; &nbsp; cards = shuffle &amp;<|</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List.map (\\index -&amp;> Card.initialModel (<span class=\"hljs-string\">\"images/\"</span> ++ (toString (index % <span class=\"hljs-number\">8</span>)) ++ <span class=\"hljs-string\">\".png\"</span>) index) [<span class=\"hljs-number\">1.</span><span class=\"hljs-number\">.16</span>],</div><div>&nbsp; &nbsp; score = <span class=\"hljs-number\">0</span>,</div><div>&nbsp; &nbsp; matched_pair = <span class=\"hljs-number\">0</span>,</div><div>&nbsp; &nbsp; rows = <span class=\"hljs-number\">4</span>,</div><div>&nbsp; &nbsp; columns = <span class=\"hljs-number\">4</span></div><div>&nbsp; }</div><div></code></pre></div><div><p>followings are last part of memoryGame.elm which includes view and update functions.</div><div>You can see how well you can separate various views based on the status of your program.</p></div><div><pre><code class=\"hljs elm\">view: Signal.Address Action -&amp;> Model -&amp;> Html.Html</div><div>view address model =</div><div>&nbsp; <span class=\"hljs-keyword\">let</span></div><div>&nbsp; &nbsp; maxCount = List.length model.cards</div><div>&nbsp; <span class=\"hljs-keyword\">in</span></div><div>&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> model.matched_pair == maxCount then</div><div>&nbsp; &nbsp; &nbsp; div [Html.Attributes.class <span class=\"hljs-string\">\"winContainer\"</span>]</div><div>&nbsp; &nbsp; &nbsp; [</div><div>&nbsp; &nbsp; &nbsp; &nbsp; p [] [</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; text <span class=\"hljs-string\">\"You Won!\"</span>,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; img [Html.Attributes.src <span class=\"hljs-string\">\"images/halloween178.svg\"</span>] []</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ],</div><div>&nbsp; &nbsp; &nbsp; &nbsp; p [] [</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; span [] [(Html.text (<span class=\"hljs-string\">\"Score: \"</span> ++ toString (model.matched_pair * <span class=\"hljs-number\">50</span> - model.score)))]</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ],</div><div>&nbsp; &nbsp; &nbsp; &nbsp; button [onClick address Restart, Html.Attributes.class <span class=\"hljs-string\">\"btn btn-default btn-circle btn-lg\"</span>] [Html.text <span class=\"hljs-string\">\"Restart\"</span>]</div><div>&nbsp; &nbsp; &nbsp; ]</div><div>&nbsp; &nbsp; <span class=\"hljs-keyword\">else</span></div><div>&nbsp; &nbsp; &nbsp; div [Html.Attributes.class &nbsp;<span class=\"hljs-string\">\"col-xs-12 main\"</span>] [</div><div>&nbsp;div [Html.Attributes.class &nbsp;<span class=\"hljs-string\">\"infoContainer col-xs-4\"</span>] [</div><div>&nbsp; &nbsp; &nbsp; &nbsp; p [] [</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Html.text <span class=\"hljs-string\">\"Moves: \"</span>,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; span [] [(Html.text (toString model.score))]</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ],</div><div>&nbsp; &nbsp; &nbsp; &nbsp; p [] [</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Html.text <span class=\"hljs-string\">\"Matched: \"</span>,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; span [] [(Html.text (toString ((toFloat model.matched_pair) / <span class=\"hljs-number\">2</span>) &nbsp;++ <span class=\"hljs-string\">\" / \"</span> ++ toString ( toFloat model.rows * toFloat model.columns / <span class=\"hljs-number\">2</span>)))]</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ]</div><div>&nbsp; &nbsp; &nbsp; &nbsp;],</div><div>&nbsp; &nbsp; &nbsp; &nbsp;div [Html.Attributes.class <span class=\"hljs-string\">\"cardsContainer col-xs-8\"</span>]</div><div>&nbsp; &nbsp; &nbsp; &nbsp; [</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; div [Html.Attributes.style &nbsp;[(<span class=\"hljs-string\">\"width\"</span>, toString (model.columns * <span class=\"hljs-number\">80</span>) ++ <span class=\"hljs-string\">\"px\"</span>)]]</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (List.map (\\cModel -&amp;> Card.view (Signal.forwardTo address (Do cModel.id)) cModel) model.cards)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ]</div><div><br></div><div>&nbsp; &nbsp; &nbsp; ]</div><div><br></div><div>update: Action -&amp;> Model -&amp;> Model</div><div>update action model =</div><div>&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">case</span> action <span class=\"hljs-keyword\">of</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; Restart -&amp;> init</div><div>&nbsp; &nbsp; &nbsp; &nbsp; --Do Int Card.status</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Do y x -&amp;> model |&amp;> updateCardById x y</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&amp;> checkAndLock</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&amp;> closeAllCards y</div><div></code></pre></div><div><p>I think Elm is super powerful and it is the language of the next generation web applications.</p></div><div><p><img src=\"http://www.4shared.com/download/YcDLZsLsba/Screen_Shot_2016-02-03_at_1019.png?sbsr=cea9a64442ae88d8b7719c4d0f82aea0964&amp;amp;lgfp=3000\" alt=\"alt\"></p></div><div><p>You can try the game out online <a href=\"http://nazanin1369.github.io/elm-memoryGame/\">here</a></p></div>",
      "date" : "April 13, 2016",
      "id" : "BuildingaMemoryGamewithElmlang",
      "summary" : "You may ask your self why Elm is so fast they are many reason one is leveraging the virtual DOM. The new elm-html library enabled using the CSS and HTML directly in Elm and uses and optimizes the code by doing some lazy rendering.",
      "title" : "Building a Memory Game with Elmlang"
    },
    "MovingBreakpointsIntelligently" : {
      "date" : "February 26, 2016",
      "id" : "MovingBreakpointsIntelligently",
      "summary" : "In most debuggers, a breakpoint will 'slide' if the clicked line doesn't have any code. This is supposed to be a helpful feature,but it becomes **infuriating** if it behaves wrongly. In Firefox 46, we made our breakpoint sliding algorithm much more robust.",
      "title" : "Moving Breakpoints Intelligently"
    },
    "OntheRoadtoBetterSourcemapsintheFirefoxDeveloperTools" : {
      "date" : "January 11, 2016",
      "id" : "OntheRoadtoBetterSourcemapsintheFirefoxDeveloperTools",
      "summary" : "In this post, I explain why it has taken so long to get the Firefox console sourcemapped.It requires an unobtrusive debug mode which is really hard to do, but we got it working. The console now has access to sourcemaps, so we are only one small step away from getting it working.",
      "title" : "On the Road to Better Sourcemaps in the Firefox Developer Tools"
    },
    "RIPOver-EngineeredBlog" : {
      "date" : "April 01, 2016",
      "id" : "RIPOver-EngineeredBlog",
      "summary" : "It’s been 6 months since my last blog rewrite, so it’s time for another one. This time, let’s subtract.",
      "title" : "RIP Over-Engineered Blog"
    }
  }
}
